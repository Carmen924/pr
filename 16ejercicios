-> Ejercicio 1 
def contar_ocurrencias(lista_palabras):
    ocurrencias = {}
    for palabra in lista_palabras:
        if palabra in ocurrencias:
            ocurrencias[palabra] += 1
        else:
            ocurrencias[palabra] = 1
    return ocurrencias

lista = ["manzana", "banana", "pera", "manzana", "manzana", "pera"]
resultado = contar_ocurrencias(lista)
print(resultado)

-> Ejercicio 2 
def combinar_diccionarios(dic1, dic2):
    resultado = dic1.copy()  # Copiamos el primer diccionario para no modificar el original
    for clave, valor in dic2.items():
        if clave in resultado:
            resultado[clave] += valor
        else:
            resultado[clave] = valor
    return resultado

diccionario1 = {'a': 2, 'b': 3, 'c': 1}
diccionario2 = {'b': 2, 'c': 4, 'd': 5}

resultado = combinar_diccionarios(diccionario1, diccionario2)
print(resultado)

-> Ejercicio 3
def frecuencia_numeros(lista_numeros):
    frecuencia = {}
    for numero in lista_numeros:
        if numero in frecuencia:
            frecuencia[numero] += 1
        else:
            frecuencia[numero] = 1
    return frecuencia

lista = [1, 2, 2, 3, 4, 4, 4, 5 , 6, 6, 7, 8, 8, 8, 8]
resultado = frecuencia_numeros(lista)
print(resultado)

-> Ejercicio 4
def filtrar_palabras_largas(lista_palabras, n):
    palabras_filtradas = [palabra for palabra in lista_palabras if len(palabra) > n]
    return palabras_filtradas

palabras = ["manzana", "melon", "pera", "mango"]
longitud = 5
resultado = filtrar_palabras_largas(palabras, longitud)
print(resultado)

-> Ejercicio 5
def invertir_tuplas(lista_tuplas):
    tuplas_invertidas = [(b, a) for (a, b) in lista_tuplas]
    return tuplas_invertidas

lista = [(6, 7), (8, 9), (10, 11)]
resultado = invertir_tuplas(lista)
print(resultado)

-> Ejercicio 6
def valor_mas_frecuente(lista_numeros):
    frecuencia = {}
    for numero in lista_numeros:
        if numero in frecuencia:
            frecuencia[numero] += 1
        else:
            frecuencia[numero] = 1
            
    max_frecuencia = max(frecuencia.values())
    numeros_frecuentes = [numero for numero, freq in frecuencia.items() if freq == max_frecuencia]
    
    return numeros_frecuentes[0] if numeros_frecuentes else None


lista = [11, 15, 16, 15, 17, 13, 15, 19, 14, 15]
resultado = valor_mas_frecuente(lista)
print(resultado)

-> Ejercicio 7
def es_subconjunto(conjunto_a, conjunto_b):
    return conjunto_a.issubset(conjunto_b)

conjunto1 = {2, 3, 5}
conjunto2 = {1, 2, 3, 4, 5}

resultado = es_subconjunto(conjunto1, conjunto2)
print(resultado) 

-> Ejercicio 8
def agrupar_por_edad(lista_personas):
    agrupacion = {}
    for persona in lista_personas:
        edad = persona["edad"]
        if edad not in agrupacion:
            agrupacion[edad] = []
        agrupacion[edad].append(persona)
    return agrupacion

personas = [
    {"nombre": "Carlos", "edad": 16},
    {"nombre": "MarÃ­a", "edad": 19},
    {"nombre": "Jaasiel", "edad": 14},
    {"nombre": "Rachel", "edad": 41},
    {"nombre": "Carlos", "edad": 44}
]

resultado = agrupar_por_edad(personas)
print(resultado)

-> Ejercicio 9
def merge_sort(lista):
    if len(lista) <= 1:
        return lista

    medio = len(lista) // 2
    izquierda = merge_sort(lista[:medio])
    derecha = merge_sort(lista[medio:])

    return merge(izquierda, derecha)

def merge(izquierda, derecha):
    resultado = []
    i = j = 0

    while i < len(izquierda) and j < len(derecha):
        if izquierda[i] <= derecha[j]:
            resultado.append(izquierda[i])
            i += 1
        else:
            resultado.append(derecha[j])
            j += 1

    resultado.extend(izquierda[i:])
    resultado.extend(derecha[j:])
    return resultado

lista = [38, 27, 43, 3, 9, 82, 10]
resultado = merge_sort(lista)
print(resultado)

-> Ejercicio 10
def eliminar_menores(lista, limite):
    return [num for num in lista if num >= limite]

numeros = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
limite = 5
print(eliminar_menores(numeros, limite))

-> Ejercicio 11
def flatten_list(nested_list):
    return [elemento for sublist in nested_list for elemento in sublist]


nested_list = [[1, 2, 3], [4, 5], [6, 7, 8, 9]]
print(flatten_list(nested_list))

-> Ejercicio 12
def calcular_mediana(lista):
    lista_ordenada = sorted(lista)
  
    n = len(lista_ordenada)
 
    if n % 2 == 1:
        mediana = lista_ordenada[n // 2]
    else:
        mediana = (lista_ordenada[n // 2 - 1] + lista_ordenada[n // 2]) / 2
    
    return mediana

numeros = [1, 3, 5, 7, 9]
print(calcular_mediana(numeros))

-> Ejercicio 13
def duplicar_elementos_consecutivos(lista):
    return [num for num in lista for _ in range(2)]

numeros = [4, 5, 6, 7]
print(duplicar_elementos_consecutivos(numeros)) 

-> Ejercicio 14
def contar_palabras(frases):
    contador_palabras = {}
    
    for frase in frases:
        contador_palabras[frase] = len(frase.split())
    
    return contador_palabras

frases = ["Hola", "Jaasiel es divertido", "Me gusta leer"]
print(contar_palabras(frases))

-> Ejercicio 15
def clave_maxima(diccionario):
    return max(diccionario, key=diccionario.get)

mi_diccionario = {'a': 10, 'b': 25, 'c': 38}
print(clave_maxima(mi_diccionario)) 

-> Ejercicio 16
def encontrar_palindromos(lista_palabras):
    return [palabra for palabra in lista_palabras if palabra == palabra[::-1]]

palabras = ["radar", "salas", "raton", "madam", "anillo", "rotador"]
print(encontrar_palindromos(palabras)) 
